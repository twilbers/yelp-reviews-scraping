import functools
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT


class PgsqlHandler:
    def __init__(self):
        self.host = 'postgres'
        self.user = 'postgres'
        self.passwd = 'postgres'
        self.db = 'yelp_reviews'
        self.port = 5432
        self.conn = psycopg2.connect(host=self.host,
                                     user=self.user,
                                     port=self.port,
                                     password=self.passwd)

        self.conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        self.cursor = self.conn.cursor()
        self.init_db()

    def init_db(self):
        if not self.db_exists('yelp_reviews'):
            self.cursor.execute("CREATE DATABASE yelp_reviews;")

        self.create_tables()

    def create_tables(self):
        create_biz = """CREATE TABLE IF NOT EXISTS biz (
                  id int GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
                  name VARCHAR(255),
                  city VARCHAR(255),
                  zipcode VARCHAR(10),
                  state VARCHAR(3),
                  link VARCHAR(255),
                  star_raiting VARCHAR(4),
                  unique (link));"""
        self.cursor.execute(create_biz)

        create_user = """CREATE TABLE IF NOT EXISTS reviewers (
                  id INT NOT NULL,
                  label VARCHAR(6),
                  user_url VARCHAR(255),
                  star_raiting smallint,
                  location VARCHAR(255),
                  review_text TEXT,
                  review_date VARCHAR(10),
                  link VARCHAR(255),
                  feedback VARCHAR(255));"""
        self.cursor.execute(create_user)

    def query_to_value(func):
        @functools.wraps(func)
        def wrapper_decorator(self, *args, **kwargs):
            query = func(self, *args, **kwargs)
            print(query)
            results = self.get_value(query)
            return results
        return wrapper_decorator

    def get_value(self, query):
        self.cursor.execute(query)
        record = self.cursor.fetchone()
        if len(record) == 1:
            record = record[0]
            return record
        else:
            raise ValueError('More than one value for record'
                             ' {record}'.format(record=record))

    @query_to_value
    def get_biz_seq_id(self):
        return "SELECT currval('biz_id_seq')"

    @query_to_value
    def link_exists(self, url):
        return """SELECT exists (
                    SELECT FROM biz
                    WHERE link = '{url}'
                    LIMIT 1);""".format(url=url)

    @query_to_value
    def db_exists(self, db):
        return f"""SELECT exists (
                    SELECT FROM pg_catalog.pg_database
                    WHERE datname = '{db}' LIMIT 1);"""
